// Code generated by go-bindata. DO NOT EDIT.
// sources:
// db/migrations/000001_create_department_table.down.sql
// db/migrations/000001_create_department_table.up.sql

package migrations


import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}


type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bindata000001createdepartmenttableDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x48\x49\x2d\x48\x2c\x2a\xc9\x4d\xcd\x2b\xb1\x06\x04\x00\x00\xff\xff\xce\x12\x57\x7c\x20\x00\x00\x00")

func bindata000001createdepartmenttableDownSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindata000001createdepartmenttableDownSql,
		"000001_create_department_table.down.sql",
	)
}



func bindata000001createdepartmenttableDownSql() (*asset, error) {
	bytes, err := bindata000001createdepartmenttableDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "000001_create_department_table.down.sql",
		size: 32,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1582689576, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}

var _bindata000001createdepartmenttableUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8e\x31\x6b\xc3\x30\x10\x46\x77\xfd\x8a\x6f\x4b\x02\x5d\xb2\x26\x93\xa2\x5e\x88\x40\x51\xa8\x75\x6a\xd3\xc9\xa8\xb5\x30\x02\x5b\xb4\xb6\x28\xfe\xf9\x05\x61\xda\x42\xc7\xf7\xb8\xbb\x77\xaa\x21\xc9\x04\x47\x4f\x9e\xac\x22\x74\xf1\x23\x4c\x65\x8c\xb9\xb4\xa9\x6b\xe7\xf8\x29\x00\xc0\xb1\x6c\x18\x2f\x9a\x2f\xd8\x57\xa1\xad\x6a\xe8\x4a\x96\x71\x7a\x5d\x95\xbd\xe1\xaa\xed\xb3\x34\x9e\x7e\x58\xde\x7f\x59\x49\x75\x21\xec\x8f\x42\xac\x4d\x96\x27\x43\xd0\x67\xd8\x1b\x83\xee\xda\xb1\xfb\x93\xc7\xb6\x6e\xa5\x0e\x6f\xa9\x4f\xb9\xd4\x29\xeb\x8d\xc1\x23\x9d\xa5\x37\x8c\x1c\x97\xf2\x15\x86\xed\xe6\xdf\xcf\x9b\xc3\x61\x8a\xfd\xfb\x10\xe6\x79\xf7\x50\xcf\xe4\x30\x46\x94\xb8\x14\xb1\x3b\x7e\x07\x00\x00\xff\xff\x57\x5d\xa3\xaa\xf3\x00\x00\x00")

func bindata000001createdepartmenttableUpSqlBytes() ([]byte, error) {
	return bindataRead(
		_bindata000001createdepartmenttableUpSql,
		"000001_create_department_table.up.sql",
	)
}



func bindata000001createdepartmenttableUpSql() (*asset, error) {
	bytes, err := bindata000001createdepartmenttableUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{
		name: "000001_create_department_table.up.sql",
		size: 243,
		md5checksum: "",
		mode: os.FileMode(420),
		modTime: time.Unix(1582689576, 0),
	}

	a := &asset{bytes: bytes, info: info}

	return a, nil
}


//
// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
//
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
//
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

//
// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or could not be loaded.
//
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

//
// AssetNames returns the names of the assets.
// nolint: deadcode
//
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

//
// _bindata is a table, holding each asset generator, mapped to its name.
//
var _bindata = map[string]func() (*asset, error){
	"000001_create_department_table.down.sql": bindata000001createdepartmenttableDownSql,
	"000001_create_department_table.up.sql":   bindata000001createdepartmenttableUpSql,
}

//
// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
//
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{
					Op: "open",
					Path: name,
					Err: os.ErrNotExist,
				}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{
			Op: "open",
			Path: name,
			Err: os.ErrNotExist,
		}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}


type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{Func: nil, Children: map[string]*bintree{
	"000001_create_department_table.down.sql": {Func: bindata000001createdepartmenttableDownSql, Children: map[string]*bintree{}},
	"000001_create_department_table.up.sql": {Func: bindata000001createdepartmenttableUpSql, Children: map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
